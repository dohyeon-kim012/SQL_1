select user();
show databases;
select now();

/* root의 고유 권한
create database mydb;  
drop database mydb;
*/

use acedb;
show tables;
create table if not exists Man(
	name char(20), 
    year int);

desc Man;

alter table Man add habit char(20); -- field 추가
alter table Man drop habit; -- field 삭제
alter table Man rename Person; -- table 이름 변경

insert into Man(name, year) values('kim',2000);
insert into Man(name, year) values('choi',1995);
insert into Man(name) values('park'); -- 이름값만 추가
insert into Man(year) values(1994);  -- year값만 추가

delete from Man where name = 'kim';
delete from Man; -- 데이터만 삭제. 틀은 남아 있음

drop table Man; -- 틀 자체를 지움

select * from Man;


-- new table

drop table s;

create table if not exists s(
	id int auto_increment primary key, -- 자동 증가되는 primary key 생성하기(field name: id)
	name varchar(20),
    kor tinyint,
    eng tinyint,
    mat tinyint);

insert into s(id, name, kor, eng, mat) values(101,'이순신',85,87,90);
insert into s(name, kor, eng, mat) values('강감찬',75,80,90);
insert into s(name, kor, eng, mat) values('한석봉',99,98,99);
insert into s(name, kor, eng, mat) values('황진이',100,100,100);
insert into s(name, kor, eng, mat) values('안중근',90,85,90);
insert into s(name, kor, eng, mat) values('박문수',95,98,96);
insert into s(name, kor, eng, mat) values('임꺽정',15,35,45);
insert into s(name, kor, eng, mat) values('김정호',90,95,80);
insert into s(name, kor, eng, mat) values('정몽주',90,90,95);
insert into s(name, kor, eng, mat) values('양주종',50,45,60);
    
desc s;
select count(*) from s;
select * from s;

select name, eng from s limit 5, 3;
select name, eng from s order by name asc; -- 기본값 (<-> desc)
select name, eng, mat from s order by eng desc, mat asc;

select name as '이름', min(kor) as '국어' from s;
select max(kor) as '국어' from s;
select max(kor), min(kor), sum(kor), avg(kor) from s;
select name, (kor+eng+mat) as 'total' from s;
select name, (kor+eng+mat) as 'total', (kor+eng+mat)/3 as 'avg' from s;

create table s2(select name, (kor+eng+mat) as 'total', (kor+eng+mat)/3.0 as 'avg' from s);
-- s에서 자료를 뽑아 s2라는 새로운 테이블 생성

create table if not exists s5(
	name char(20), total int, avg float);
insert into s5 select name, kor+eng+mat, (kor+eng+mat)/3.0 from s;

select * from s4 where avg >= 90;
select * from s4 where (80 < avg) and (avg < 90);  -- 사이의 값을 구할 때는 ()와 and/or가 필요함
select * from s4 where avg between 80 and 90;  -- ()+and 와 between 은 같은 문장임 (between에서는 80, 90 값도 포함)
select * from s4 where name like '이%';  -- '이'로 시작하는 name만 select(일부 프로그램은 % 대신 * 사용)
select * from s4 where name like '이_신'; -- 중간 글자를 모를 때

use world;
show tables;
desc city;
select count(*) from city;
select * from city where Countrycode = 'kor';
desc country;
select count(*) from country;
select * from country where continent = 'Asia';
select * from countrylanguage;
select * from city where name in ('seoul', 'new york', 'Berlin');
select * from city where countrycode = 
	(select Countrycode from city where name = 'Seoul'); -- => serb-query문: query문 안에 또 다른 query문이 삽입됨
 -- = select * from city where Countrycode = 'kor';    
select * from city where Countrycode = 'deu';
select * from city order by Population desc limit 10; -- order by __ : __로 정리해서 나타낼 때

select Countrycode, name, Max(Population) from city
 group by countrycode having max(population) > 9000000; -- group by __ having : 해당되는 그룹을 나타낼때

select * from countrylanguage
join country on countrylanguage.countrycode = country.code;

select city.name, city.countrycode, city.population, country.GNP from city
join country on city.countrycode = country.code; 
-- => join된 테이블값(공통분모)들 중 필요한 값만 나열해서 뽑아내기


	<in python>
	
>>> man = ['이순신', '황진이', '한석봉']
>>> job = ['군인', '시인', '공무원']
>>> zip(man, job)
<zip object at 0x000001F1256D1340>
>>> list(zip(man, job))
[('이순신', '군인'), ('황진이', '시인'), ('한석봉', '공무원')]
>>> k2 = list(zip(man, job))
>>> k2
[('이순신', '군인'), ('황진이', '시인'), ('한석봉', '공무원')]
>>> dict(zip(man, job))
{'이순신': '군인', '황진이': '시인', '한석봉': '공무원'}
>>> d2 = dict(zip(man, job))
>>> d2.keys()
dict_keys(['이순신', '황진이', '한석봉'])
>>> d2.values()
dict_values(['군인', '시인', '공무원'])
>>> d2.items()
dict_items([('이순신', '군인'), ('황진이', '시인'), ('한석봉', '공무원')])
>>> ## list 와 list를 만들어 합쳐서 다른 list와 dict 만들어보기 -> sql로 연결하기
>>> for i, j in enumerate(man):
	print(j)

	
이순신
황진이
한석봉
>>> for i, j in enumerate(man):
	print(i, j)

	
0 이순신
1 황진이
2 한석봉
>>> ## 자동으로 인덱스 만들어짐
>>> list(enumerate(man))
[(0, '이순신'), (1, '황진이'), (2, '한석봉')]
>>> dict(enumerate(man))
{0: '이순신', 1: '황진이', 2: '한석봉'}
